# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
load("Data/basedatos.rda")
unique(resultados$GRUPOREFERENCIA)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
load("Data/basedatos.rda")
unique(resultados$GRUPOREFERENCIA)
View(resultados)
test = dplyr::filter(resultados, GRUPOREFERENCIA == 'INGENIERÍA')
View(test)
summary(test$MOD_INGLES_PUNT)
View(test)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
test = dplyr::filter(resultados, GRUPOREFERENCIA %in% 'INGENIERÍA')
test = dplyr::filter(resultados, GRUPOREFERENCIA == 'INGENIERÍA')
test = dplyr::filter(resultados, GRUPOREFERENCIA %in% 'INGENIERÍA')
test = dplyr::filter(resultados, GRUPOREFERENCIA == 'INGENIERÍA')
test = dplyr::filter(resultados, GRUPOREFERENCIA %in% ('INGENIERÍA'))
test = dplyr::filter(resultados, GRUPOREFERENCIA == 'INGENIERÍA')
test = dplyr::filter(resultados, GRUPOREFERENCIA %in% ['INGENIERÍA'])
load("Data/basedatos.rda")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
remove.packages("ggplot2")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
devtools::install_version("ggplot2",version = '3.6.3', repos = "http://cran.us.r-project.org")
remotes::install_version('ggplot2','3.6.3')
devtools::install_github("tidyverse/ggplot2@v3.6.3")
devtools::install_github("tidyverse/ggplot2/releases/tag/v3.3.6")
install.packages("/Users/alejandrocano/Downloads/ggplot2-3.3.6.tar.gz", repos = NULL,type = 'source')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
pack <- available.packages()
pack["ggplot2","Depends"]
avail_pks <- available.packages()
deps <- tools::package_dependencies(packages = avail_pks[1:200, "Package"],
recursive = TRUE)
tibble(Package=names(deps),
data=map(deps, as_tibble)) %>%
unnest(data)
avail_pks <- available.packages()
deps <- tools::package_dependencies(packages = avail_pks[1:200, "Package"],
recursive = TRUE)
tibble(Package=names(deps),
data=map(deps, as_tibble)) %>%
tidyr::unnest(data)
avail_pks <- available.packages()
deps <- tools::package_dependencies(packages = avail_pks[1:200, "Package"],
recursive = TRUE)
tibble::tibble(Package=names(deps),
data=map(deps, as_tibble)) %>%
tidyr::unnest(data)
avail_pks <- available.packages()
deps <- tools::package_dependencies(packages = avail_pks[1:200, "Package"],
recursive = TRUE)
tibble::tibble(Package=names(deps),
data=purr::map(deps, as_tibble)) %>%
tidyr::unnest(data)
avail_pks <- available.packages()
deps <- tools::package_dependencies(packages = avail_pks[1:200, "Package"],
recursive = TRUE)
tibble::tibble(Package=names(deps),
data=purrr::map(deps, as_tibble)) %>%
tidyr::unnest(data)
avail_pks <- available.packages()
deps <- tools::package_dependencies(packages = avail_pks[1:200, "Package"],
recursive = TRUE)
tibble::tibble(Package=names(deps),
data=purrr::map(deps, tibble::as_tibble)) %>%
tidyr::unnest(data)
dev.off()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
remove.packages("ggplot2")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
load("Data/medias.rda")
View(mediasSaberPro)
View(mediasSaberPro)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
saberPro <- read_delim("../valor-agregado-educacion/Datos_Originales/SaberPro_Genéricas_2020.txt", "¬", escape_double = FALSE, trim_ws = T)
saberPro <- readr::read_delim("../valor-agregado-educacion/Datos_Originales/SaberPro_Genéricas_2020.txt", "¬", escape_double = FALSE, trim_ws = T)
aux1 <- saberPro %>% group_by(GRUPOREFERENCIA) %>% summarise(MOD_LECTURA_CRITICA_PUNT = mean(MOD_LECTURA_CRITICA_PUNT))
aux1 <- saberPro %>% dplyr::group_by(GRUPOREFERENCIA) %>% dplyr::summarise(MOD_LECTURA_CRITICA_PUNT = mean(MOD_LECTURA_CRITICA_PUNT))
View(aux1)
aux1 <- saberPro %>% dplyr::group_by(GRUPOREFERENCIA) %>% dplyr::summarise(MOD_LECTURA_CRITICA_PUNT = mean(MOD_LECTURA_CRITICA_PUNT,rm_na= TRUE))
View(saberPro)
View(aux1)
aux1 <- saberPro %>% dplyr::group_by(GRUPOREFERENCIA) %>% dplyr::summarise(MOD_LECTURA_CRITICA_PUNT = mean(MOD_LECTURA_CRITICA_PUNT,na.rm= TRUE))
View(aux1)
aux1 <- saberPro %>% dplyr::group_by(GRUPOREFERENCIA) %>% dplyr::summarise(MOD_LECTURA_CRITICA_PUNT = mean(MOD_LECTURA_CRITICA_PUNT,na.rm= TRUE))
aux2 <- saberPro %>% dplyr::group_by(GRUPOREFERENCIA) %>% dplyr::summarise(MOD_RAZONA_CUANTITAT_PUNT = mean(MOD_RAZONA_CUANTITAT_PUNT,na.rm= TRUE))
aux3 <- saberPro %>% dplyr::group_by(GRUPOREFERENCIA) %>% dplyr::summarise(MOD_INGLES_PUNT = mean(MOD_INGLES_PUNT,na.rm= TRUE))
aux4 <- saberPro %>% dplyr::group_by(GRUPOREFERENCIA) %>% dplyr::summarise(PUNT_GLOBAL.x = mean(PUNT_GLOBAL,na.rm= TRUE))
mediasSaberPro <- left_join(x = prg_grupRef, y = aux1, by = "GRUPOREFERENCIA") %>%
left_join(y = aux2, by = "GRUPOREFERENCIA") %>%
left_join(y = aux3, by = "GRUPOREFERENCIA") %>%
left_join(y = aux4, by = "GRUPOREFERENCIA")
mediasSaberPro <- dplyr::left_join(x = prg_grupRef, y = aux1, by = "GRUPOREFERENCIA") %>%
left_join(y = aux2, by = "GRUPOREFERENCIA") %>%
left_join(y = aux3, by = "GRUPOREFERENCIA") %>%
left_join(y = aux4, by = "GRUPOREFERENCIA")
mediasSaberPro <- dplyr::left_join(x = prg_grupRef, y = aux1, by = "GRUPOREFERENCIA") %>%
dplyr::left_join(y = aux2, by = "GRUPOREFERENCIA") %>%
dplyr::left_join(y = aux3, by = "GRUPOREFERENCIA") %>%
dplyr::left_join(y = aux4, by = "GRUPOREFERENCIA")
load("Data/basedatos.rda")
prg_grupRef <- resultados %>% dplyr::select(GRUPOREFERENCIA)
prg_grupRef <- unique(prg_grupRef)
mediasSaberPro <- dplyr::left_join(x = prg_grupRef, y = aux1, by = "GRUPOREFERENCIA") %>%
dplyr::left_join(y = aux2, by = "GRUPOREFERENCIA") %>%
dplyr::left_join(y = aux3, by = "GRUPOREFERENCIA") %>%
dplyr::left_join(y = aux4, by = "GRUPOREFERENCIA")
View(mediasSaberPro)
rm(aux1, aux2, aux3, aux4)
load("saber11Nal.RData")
load("../valor-agregado-educacion/Datos_Originales/saber11Nal.RData")
aux1 <- saber11Nal %>% group_by(periodoAux) %>% summarise(Lectura_critica.11 = mean(Lectura_critica.11))
aux2 <- saber11Nal %>% group_by(periodoAux) %>% summarise(Matematicas.11 = mean(Matematicas.11))
aux1 <- saber11Nal %>% dplyr::group_by(periodoAux) %>% dplyr::summarise(Lectura_critica.11 = mean(Lectura_critica.11,na.rm=TRUE))
aux2 <- saber11Nal %>% dplyr::group_by(periodoAux) %>% dplyr::summarise(Matematicas.11 = mean(Matematicas.11,na.rm=TRUE))
aux3 <- saber11Nal %>% dplyr::group_by(periodoAux) %>% dplyr::summarise(Ingles.11 = mean(Ingles.11,na.rm=TRUE))
aux4 <- saber11Nal %>% dplyr::group_by(periodoAux) %>% dplyr::summarise(Global.11 = mean(Global.11,na.rm=TRUE))
mediasSaber11 <- dplyr::left_join(x = aux1, y = aux2, by = "periodoAux") %>%
dplyr::left_join(y = aux3, by = "periodoAux") %>%
dplyr::left_join(y = aux4, by = "periodoAux")
View(mediasSaber11)
rm(aux1, aux2, aux3, aux4)
save(mediasSaber11,mediasSaberPro, file = 'Data/medias.rda')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
